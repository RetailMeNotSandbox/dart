swagger: "2.0"
info:
  version: "1.0.dev"
  title: "Dart REST API"
  description: |
    *DRAFT*

    Dart, short for "data mart Ã  la carte", is a self-service data workflow solution that
    facilitates the creation, transformation, and movement of data using data engines,
    primarily in the context of AWS. Put another way, it is a system to facilitate moving
    data in and out of datastores like S3, RDS, Redshift, EMR, DynamoDB, something custom, etc.

    This document describes the Dart REST API using the Swagger 2.0 format. Portions of
    the API are not fully documented due to limitations of the Swagger 2.0 specification
    and the complexity of this API. These APIs will be marked with *NOTE* and will provide
    more details in the descriptive text.
  contact:
    url: https://github.com/RetailMeNotSandbox/dart
  license:
    name: MIT
    url: https://raw.githubusercontent.com/RetailMeNotSandbox/dart/master/LICENSE.txt
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /action:
    get:
      operationId: listActions
      summary: "returns the actions matching the filters or all actions if no filters are specified"
      tags:
        - "Action"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
        - $ref: '#/parameters/orderByParam'
        - name: "datastore_id"
          type: "string"
          in: "query"
        - name: "workflow_id"
          type: "string"
          in: "query"
      responses:
        "200":
          description: "returns the actions matching the filters or all actions if no filters are specified."
          schema:
            $ref: '#/definitions/PagedActionsResponse'
  /action/{action_id}:
    get:
      operationId: getAction
      summary: "return the action"
      tags:
        - "Action"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: returns the action
          schema:
            $ref: '#/definitions/ActionResponse'
    put:
      operationId: updateAction
      summary: "update the action"
      tags:
        - "Action"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
        - name: "action"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Action"
      responses:
        "200":
          description: returns the action
          schema:
            $ref: '#/definitions/ActionResponse'
    patch:
      operationId: patchAction
      summary: "patch the action using JSON Patch"
      tags:
        - "Action"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
        - $ref: '#/parameters/patchParam'
      responses:
        "200":
          description: returns the action
          schema:
            $ref: '#/definitions/ActionResponse'
    delete:
      operationId: deleteAction
      summary: "delete the action"
      tags:
        - "Action"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /action/{action_id}/subscription/elements:
    get:
      operationId: listActionSubscriptionElements
      summary: "get the subscription elements for an action"
      tags:
        - "Action"
        - "SubscriptionElement"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
      responses:
        "200":
          description: "the subscription elements"
          schema:
            $ref: '#/definitions/PagedSubscriptionElementsResponse'
        "400":
          description: "if the action doesn't have a subscription"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dataset:
    get:
      operationId: listDatasets
      summary: "returns the datasets matching the filters or all datasets if no filters are specified"
      tags:
        - "Dataset"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "returns the datasets matching the filters or all datasets if no filters are specified."
          schema:
            $ref: '#/definitions/PagedDatasetsResponse'
    post:
      operationId: createDataset
      summary: "create a dataset"
      tags:
        - "Dataset"
      parameters:
        - name: "dataset"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Dataset"
      responses:
        "200":
          description: returns the created Dataset
          schema:
            $ref: '#/definitions/DatasetResponse'
  /dataset/guess:
    get:
      operationId: guessDataset
      summary: "best guess of the dataset"
      tags:
        - "Dataset"
      parameters:
        - name: s3_path
          in: query
          type: string
          required: true
        - name: max_lines
          in: query
          type: integer
          required: true
      responses:
        "200":
          description: returns the dataset
          schema:
            $ref: '#/definitions/DatasetResponse'
  /dataset/{dataset_id}:
    get:
      operationId: getDataset
      summary: "get a dataset"
      tags:
        - "Dataset"
      parameters:
        - name: "dataset_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: returns the dataset
          schema:
            $ref: '#/definitions/DatasetResponse'
    put:
      operationId: updateDataset
      summary: "update a dataset"
      tags:
        - "Dataset"
      parameters:
        - name: "dataset_id"
          type: "string"
          in: "path"
          required: true
        - name: "dataset"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Dataset"
      responses:
        "200":
          description: returns the dataset
          schema:
            $ref: '#/definitions/DatasetResponse'
    delete:
      operationId: deleteDataset
      summary: "delete a dataset"
      tags:
        - "Dataset"
      parameters:
        - name: "dataset_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /dataset/{dataset_id}/subscription:
    post:
      operationId: createDatasetSubscription
      summary: "create a subscription to a dataset"
      tags:
        - "Dataset"
        - "Subscription"
      parameters:
        - name: "dataset_id"
          type: "string"
          in: "path"
          required: true
        - name: "subscription"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Subscription"
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/SubscriptionResponse"
  /datastore:
    post:
      operationId: createDatastore
      summary: "create a datastore"
      tags:
        - "Datastore"
      parameters:
        - name: "datastore"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Datastore"
      responses:
        "200":
          description: returns the created datastore
          schema:
            $ref: '#/definitions/DatastoreResponse'
    get:
      operationId: listDatastores
      summary: "list datastores"
      tags:
        - "Datastore"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "returns the datastores matching the filters or all datastores if no filters are specified."
          schema:
            $ref: '#/definitions/PagedDatastoresResponse'
  /datastore/{datastore_id}:
    get:
      operationId: getDatastore
      summary: "return the datastore"
      tags:
        - "Datastore"
      parameters:
        - name: "datastore_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: returns the datastore
          schema:
            $ref: '#/definitions/DatastoreResponse'
    put:
      operationId: updateDatastore
      summary: "update the datastore"
      tags:
        - "Datastore"
      parameters:
        - name: "datastore_id"
          type: "string"
          in: "path"
          required: true
        - name: "datastore"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Datastore"
      responses:
        "200":
          description: returns the datastore
          schema:
            $ref: '#/definitions/DatastoreResponse'
        "400":
          description: "datastore is not in a valid state"
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      operationId: patchDatastore
      summary: "patch the datastore using JSON Patch"
      tags:
        - "Datastore"
      parameters:
        - name: "datastore_id"
          type: "string"
          in: "path"
          required: true
        - $ref: '#/parameters/patchParam'
      responses:
        "200":
          description: returns the datastore
          schema:
            $ref: '#/definitions/DatastoreResponse'
        "400":
          description: "datastore is not in a valid state"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      operationId: deleteDatastore
      summary: "delete the datastore"
      tags:
        - "Datastore"
      parameters:
        - name: "datastore_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /datastore/{datastore_id}/action:
    post:
      operationId: createDatastoreActions
      summary: "create actions for a datastore"
      tags:
        - "Datastore"
        - "Action"
      parameters:
        - name: "datastore_id"
          type: "string"
          in: "path"
          required: true
        - name: "actions"
          in: "body"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Action"
          description: |
            ~~~~
            NOTE: This parameter is specified as an array because Swagger 2.0 does
            not support the oneOf construct. This API also supports passing a single
            Action object.
            ~~~~
      responses:
        "200":
          description: "the created actions"
          schema:
            $ref: '#/definitions/ActionsResponse'
  /datastore/{datastore_id}/workflow:
    post:
      operationId: createDatastoreWorkflow
      summary: "create a workflow associated with the datastore"
      tags:
        - "Datastore"
        - "Workflow"
      parameters:
        - name: "datastore_id"
          type: "string"
          in: "path"
          required: true
        - name: "workflow"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Workflow"
      responses:
        "200":
          description: returns the created Workflow
          schema:
            $ref: '#/definitions/WorkflowResponse'
  /engine:
    get:
      operationId: listEngines
      summary: "list engines"
      tags:
        - "Engine"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "returns the engines matching the filters or all engines if no filters are specified."
          schema:
            $ref: '#/definitions/PagedEnginesResponse'
    post:
      operationId: createEngine
      summary: "create an engine"
      tags:
        - "Engine"
      parameters:
        - name: "engine"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Engine"
      responses:
        "200":
          description: "the engine"
          schema:
            $ref: '#/definitions/EngineResponse'
  /engine/{engine_id}:
    get:
      operationId: getEngine
      summary: "get an engine instance"
      tags:
        - "Engine"
      parameters:
        - name: "engine_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "the engine"
          schema:
            $ref: '#/definitions/EngineResponse'
    put:
      operationId: updateEngine
      summary: "update an engine"
      tags:
        - "Engine"
      parameters:
        - name: "engine_id"
          type: "string"
          in: "path"
          required: true
        - name: "engine"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Engine"
      responses:
        "200":
          description: "the engine"
          schema:
            $ref: '#/definitions/EngineResponse'
    delete:
      operationId: deleteEngine
      summary: "delete an engine"
      tags:
        - "Engine"
      parameters:
        - name: "engine_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /engine/{engine_id}/subgraph_definition:
    get:
      operationId: getEngineSubgraphDefinition
      summary: "return the subgraph definition for the engine"
      tags:
        - "Engine"
        - "SubgraphDefinition"
      parameters:
        - name: "engine_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "the subgraph definition"
          schema:
            $ref: "#/definitions/SubgraphDefinitionResponse"
    post:
      operationId: createEngineSubgraphDefinition
      summary: "create the subgraph definition for the engine"
      tags:
        - "Engine"
        - "SubgraphDefinition"
      parameters:
        - name: "engine_id"
          type: "string"
          in: "path"
          required: true
        - name: "subgraph_definition"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/SubgraphDefinition"
      responses:
        "200":
          description: "the subgraph definition"
          schema:
            $ref: "#/definitions/SubgraphDefinitionResponse"
  /engine/action/{action_id}/checkout:
    put:
      operationId: checkoutEngineAction
      summary: "Checkout the action"
      tags:
        - "Engine"
        - "Action"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/ActionContextResponse"
        "400":
          description: "engine action is not in a valid state"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "engine or datastore not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /engine/action/{action_id}/checkin:
    put:
      operationId: checkinEngineAction
      summary: "Checkin the action"
      tags:
        - "Engine"
        - "Action"
      parameters:
        - name: "action_id"
          type: "string"
          in: "path"
          required: true
        - name: "action_result"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ActionResult"
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "engine action is not in a valid state"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "engine or datastore not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /event:
    post:
      operationId: createEvent
      summary: "create an event"
      tags:
        - "Event"
      parameters:
        - name: "event"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Event"
      responses:
        "200":
          description: returns the event
          schema:
            $ref: '#/definitions/EventResponse'
    get:
      operationId: listEvents
      summary: "list events"
      tags:
        - "Event"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "returns the events matching the filters or all events if no filters are specified."
          schema:
            $ref: '#/definitions/PagedEventsResponse'
  /event/{event_id}:
    get:
      operationId: getEvent
      summary: "get an event"
      tags:
        - "Event"
      parameters:
        - name: "event_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: returns the event
          schema:
            $ref: '#/definitions/EventResponse'
    put:
      operationId: updateEvent
      summary: "update an event"
      tags:
        - "Event"
      parameters:
        - name: "event_id"
          type: "string"
          in: "path"
          required: true
        - name: "event"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Event"
      responses:
        "200":
          description: returns the event
          schema:
            $ref: '#/definitions/EventResponse'
    patch:
      operationId: patchEvent
      summary: "patch update an event"
      tags:
        - "Event"
      parameters:
        - name: "event_id"
          type: "string"
          in: "path"
          required: true
        - $ref: '#/parameters/patchParam'
      responses:
        "200":
          description: returns the event
          schema:
            $ref: '#/definitions/EventResponse'
    delete:
      operationId: deleteEvent
      summary: "delete an event"
      tags:
        - "Event"
      parameters:
        - name: "event_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /graph/entity_identifiers:
    get:
      operationId: getGraphEntityIdentifiers
      summary: "get the graph entity identifiers"
      tags:
        - "Graph"
        - "GraphEntityIdentifier"
      parameters:
        - name: search
          in: query
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity identifiers"
          schema:
            $ref: '#/definitions/GraphEntityIdentifiersResponse'
        "400":
          description: "error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /graph/action/{action_id}:
    get:
      operationId: getActionGraphEntity
      summary: "get the action graph entity"
      tags:
        - "Graph"
        - "Action"
      parameters:
        - name: action_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/dataset/{dataset_id}:
    get:
      operationId: getDatasetGraphEntity
      summary: "get the dataset graph entity"
      tags:
        - "Graph"
        - "Dataset"
      parameters:
        - name: dataset_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/datastore/{datastore_id}:
    get:
      operationId: getDatastoreGraphEntity
      summary: "get the datastore graph entity"
      tags:
        - "Graph"
        - "Datastore"
      parameters:
        - name: datastore_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/event/{event_id}:
    get:
      operationId: getEventGraphEntity
      summary: "get the event graph entity"
      tags:
        - "Graph"
        - "Event"
      parameters:
        - name: event_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/subscription/{subscription_id}:
    get:
      operationId: getSubscriptionGraphEntity
      summary: "get the subscription graph entity"
      tags:
        - "Graph"
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/trigger/{trigger_id}:
    get:
      operationId: getTriggerGraphEntity
      summary: "get the trigger graph entity"
      tags:
        - "Graph"
        - "Trigger"
      parameters:
        - name: trigger_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/workflow/{workflow_id}:
    get:
      operationId: getWorkflowGraphEntity
      summary: "get the workflow graph entity"
      tags:
        - "Graph"
        - "Workflow"
      parameters:
        - name: workflow_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "returns the graph entity"
          schema:
            $ref: '#/definitions/GraphEntityResponse'
  /graph/sub_graph:
    get:
      operationId: getSubgraphGraphEntity
      summary: "get the sub graphs"
      tags:
        - "Graph"
        - "Subgraph"
      parameters:
        - name: related_type
          in: query
          type: string
        - name: related_id
          in: query
          type: string
        - name: engine_name
          in: query
          type: string
      responses:
        "200":
          description: "returns the sub graphs"
          schema:
            $ref: '#/definitions/ObjectResponse'
        "404":
          description: "error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      operationId: createSubgraphGraphEntities
      summary: "create a new sub graph"
      tags:
        - "Graph"
      parameters:
        - name: debug
          in: query
          type: boolean
        - name: graph_entities
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/GraphEntity"
      responses:
        "200":
          description: "returns the graph entities"
          schema:
            $ref: '#/definitions/ObjectResponse'
        "400":
          description: "error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schema/engine:
    get:
      operationId: getEngineSchema
      summary: "get the engine JSON Schema"
      tags:
        - "Schema"
        - "Engine"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/dataset:
    get:
      operationId: getDatasetSchema
      summary: "get the dataset JSON Schema"
      tags:
        - "Schema"
        - "Dataset"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/dataset/guess:
    get:
      operationId: guessDatasetSchema
      summary: "get the JSON Schema for the dataset guess"
      tags:
        - "Schema"
        - "Dataset"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/engine/{engine_name}/datastore:
    get:
      operationId: getEngineDatastoreSchema
      summary: "get the datastore JSON Schema for the named engine"
      tags:
        - "Schema"
        - "Engine"
        - "Datastore"
      parameters:
        - name: engine_name
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
        "400":
          description: "if engine is unknown"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schema/datastore:
    get:
      operationId: getDatastoreSchema
      summary: "get the datastore JSON Schema"
      tags:
        - "Schema"
        - "Datastore"
      parameters:
        - name: datastore_id
          in: query
          type: string
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
        "404":
          description: "if the optionally specified datastore could not be found"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schema/action:
    get:
      operationId: getActionSchema
      summary: "get the action JSON Schema"
      tags:
        - "Schema"
        - "Action"
      parameters:
        - name: action_id
          in: query
          type: string
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
        "404":
          description: "if the optionally specified action could not be found"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schema/action/{action_name}:
    get:
      operationId: getActionSchemaByName
      summary: "get the action JSON Schema by action name"
      tags:
        - "Schema"
        - "Action"
      parameters:
        - name: action_name
          in: path
          type: string
          required: true
        - name: action_id
          in: query
          type: string
        - name: datastore_id
          in: query
          type: string
        - name: workflow_id
          in: query
          type: string
        - name: engine_name
          in: query
          type: string
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
        "400":
          description: "if the optionally specified action is unknown"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "if the optionally specified action could not be found"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schema/workflow:
    get:
      operationId: getWorkflowSchema
      summary: "get the workflow JSON Schema"
      tags:
        - "Schema"
        - "Workflow"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/workflow/instance:
    get:
      operationId: getWorkflowInstanceSchema
      summary: "get the workflow instance JSON Schema"
      tags:
        - "Schema"
        - "WorkflowInstance"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/trigger_type:
    get:
      operationId: getTriggerTypeSchema
      summary: "get the trigger type JSON schema"
      tags:
        - "Schema"
        - "TriggerType"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/trigger:
    get:
      operationId: getTriggerSchema
      summary: "get the trigger JSON schema"
      tags:
        - "Schema"
        - "Trigger"
      parameters:
        - name: trigger_type_name
          in: query
          type: string
        - name: trigger_id
          in: query
          type: string
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
        "400":
          description: "if the optionally specified trigger is unknown"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schema/event:
    get:
      operationId: getEventSchema
      summary: "get the event JSON schema"
      tags:
        - "Schema"
        - "Event"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /schema/subscription:
    get:
      operationId: getSubscriptionSchema
      summary: "get the subscription JSON schema"
      tags:
        - "Schema"
        - "Subscription"
      responses:
        "200":
          description: "returns the JSON Schema"
          schema:
            $ref: '#/definitions/JSONSchemaResponse'
  /subgraph_definition/{subgraph_definition_id}:
    get:
      operationId: getSubgraphDefinition
      summary: "get the subgraph definition"
      tags:
        - "SubgraphDefinition"
      parameters:
        - name: "subgraph_definition_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "the subgraph definition"
          schema:
            $ref: '#/definitions/SubgraphDefinitionResponse'
    delete:
      operationId: deleteSubgraphDefinition
      summary: "delete the subgraph definition"
      tags:
        - "SubgraphDefinition"
      parameters:
        - name: "subgraph_definition_id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /subscription:
    get:
      operationId: listSubscriptions
      summary: "list subscriptions"
      tags:
        - "Subscription"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "the subscriptions"
          schema:
            $ref: '#/definitions/PagedSubscriptionsResponse'
  /subscription/{subscription_id}:
    get:
      operationId: getSubscription
      summary: "get a subscription"
      tags:
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "the subscription"
          schema:
            $ref: '#/definitions/SubscriptionResponse'
    put:
      operationId: updateSubscription
      summary: "update a subscription"
      tags:
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          type: string
          required: true
        - name: subscription
          in: body
          required: true
          schema:
            $ref: "#/definitions/Subscription"
      responses:
        "200":
          description: "the subscription"
          schema:
            $ref: '#/definitions/SubscriptionResponse'
        "400":
          description: "subscription is in an invalid state to update"
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      operationId: patchSubscription
      summary: "update a subscription using a JSON Patch"
      tags:
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          type: string
          required: true
        - $ref: '#/parameters/patchParam'
      responses:
        "200":
          description: "the subscription"
          schema:
            $ref: '#/definitions/SubscriptionResponse'
        "400":
          description: "subscription is in an invalid state to update"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      operationId: deleteSubscription
      summary: "delete a subscription"
      tags:
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/OKResponse"
  /subscription/{subscription_id}/element_stats:
    get:
      operationId: getSubscriptionElementStats
      summary: "get the element statistics for a subscription"
      tags:
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "the element statistics"
          schema:
            $ref: '#/definitions/ObjectsResponse'
  /subscription/{subscription_id}/elements:
    get:
      operationId: listSubscriptionElements
      summary: "list the elements for a subscription"
      tags:
        - "Subscription"
      parameters:
        - name: subscription_id
          in: path
          type: string
          required: true
        - name: state
          in: query
          type: string
        - name: processed_after_s3_path
          in: query
          type: string
        - name: limit
          in: query
          type: integer
        - name: offset
          in: query
          type: integer
      responses:
        "200":
          description: "the subscription elements"
          schema:
            $ref: '#/definitions/PagedSubscriptionElementsResponse'
  /trigger:
    post:
      operationId: createTrigger
      summary: "create a new trigger"
      tags:
        - "Trigger"
      parameters:
        - name: trigger
          in: body
          required: true
          schema:
            $ref: "#/definitions/Trigger"
      responses:
        "200":
          description: "the trigger"
          schema:
            $ref: '#/definitions/TriggerResponse'
    get:
      operationId: listTriggers
      summary: "list triggers"
      tags:
        - "Trigger"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "the triggers"
          schema:
            $ref: '#/definitions/PagedTriggersResponse'
  /trigger/{trigger_id}:
    get:
      operationId: getTrigger
      summary: "get a trigger"
      tags:
        - "Trigger"
      parameters:
        - name: trigger_id
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "the trigger"
          schema:
            $ref: '#/definitions/TriggerResponse'
    put:
      operationId: updateTrigger
      summary: "update a trigger"
      tags:
        - "Trigger"
      parameters:
        - name: trigger_id
          in: path
          type: string
          required: true
        - name: trigger
          in: body
          required: true
          schema:
            $ref: "#/definitions/Trigger"
      responses:
        "200":
          description: "the trigger"
          schema:
            $ref: '#/definitions/TriggerResponse'
    patch:
      operationId: patchTrigger
      summary: "patch a trigger"
      tags:
        - "Trigger"
      parameters:
        - name: trigger_id
          in: path
          type: string
          required: true
        - $ref: '#/parameters/patchParam'
      responses:
        "200":
          description: "the trigger"
          schema:
            $ref: '#/definitions/TriggerResponse'
    delete:
      operationId: deleteTrigger
      summary: "delete a trigger"
      tags:
        - "Trigger"
      parameters:
        - name: trigger_id
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/OKResponse"
  /trigger_type:
    get:
      operationId: listTriggerTypes
      summary: "get trigger types"
      tags:
        - "TriggerType"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
      responses:
        "200":
          description: "the trigger types"
          schema:
            $ref: '#/definitions/PagedTriggerTypesResponse'
  /workflow:
    get:
      operationId: listWorkflows
      summary: "list workflows, optionally using filters"
      tags:
        - "Workflow"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "returns the workflows matching the filters or all workflows if no filters are specified."
          schema:
            $ref: '#/definitions/PagedWorkflowsResponse'
  /workflow/{workflow_id}:
    get:
      operationId: getWorkflow
      summary: "get a workflow by id"
      tags:
        - "Workflow"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "the workflow"
          schema:
            $ref: '#/definitions/WorkflowResponse'
    put:
      operationId: updateWorkflow
      summary: "update a workflow"
      tags:
        - "Workflow"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
        - name: "workflow"
          description: "the workflow"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Workflow"
      responses:
        "200":
          description: "returns the updated workflow"
          schema:
            $ref: '#/definitions/WorkflowResponse'
        "400":
          description: "workflow is in an invalid state to update"
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      operationId: patchWorkflow
      summary: "update a workflow using a JSON patch"
      tags:
        - "Workflow"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
        - $ref: '#/parameters/patchParam'
      responses:
        "200":
          description: "returns the updated workflow"
          schema:
            $ref: '#/definitions/WorkflowResponse'
    delete:
      operationId: deleteWorkflow
      description: "delete a workflow"
      tags:
        - "Workflow"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /workflow/{workflow_id}/action:
    post:
      operationId: createWorkflowActions
      summary: "create actions for a workflow"
      tags:
        - "Workflow"
        - "Action"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
        - name: "actions"
          in: "body"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Action"
          description: |
            ~~~~
            NOTE: This parameter is specified as an array because Swagger 2.0 does
            not support the oneOf construct. This API also supports passing a single
            Action object.
            ~~~~
      responses:
        "200":
          description: "the created actions"
          schema:
            $ref: '#/definitions/ActionsResponse'
  /workflow/{workflow_id}/do-manual-trigger:
    post:
      operationId: triggerWorkflow
      summary: "manually trigger a workflow"
      tags:
        - "Workflow"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "failed to trigger the workflow"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /workflow/{workflow_id}/instance:
    get:
      operationId: listWorkflowInstancesForWorkflow
      summary: "find the instances for the specified workflow"
      tags:
        - "Workflow"
        - "WorkflowInstance"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "the workflow instance"
          schema:
            $ref: '#/definitions/PagedWorkflowInstancesResponse'
    delete:
      operationId: deleteWorkflowInstancesForWorkflow
      summary: "delete workflow instances associated with this workflow"
      tags:
        - "Workflow"
      parameters:
        - name: "workflow_id"
          description: "the workflow id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "returns a success message"
          schema:
            $ref: "#/definitions/OKResponse"
  /workflow/instance:
    get:
      operationId: listWorkflowInstances
      summary: "list workflow instances"
      tags:
        - "WorkflowInstance"
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/filtersParam'
      responses:
        "200":
          description: "returns the workflow instances"
          schema:
            $ref: '#/definitions/PagedWorkflowInstancesResponse'
  /workflow/instance/{workflow_instance_id}:
    get:
      operationId: getWorkflowInstance
      summary: "get a workflow instance"
      tags:
        - "WorkflowInstance"
      parameters:
        - name: "workflow_instance_id"
          description: "the workflow instance id"
          type: "string"
          in: "path"
          required: true
      responses:
        "200":
          description: "the workflow instance"
          schema:
            $ref: '#/definitions/WorkflowInstanceResponse'
parameters:
  limitParam:
    name: "limit"
    type: "integer"
    in: "query"
    description: |
      Specify the maximum number of records that should be returned by this request.
  offsetParam:
    name: "offset"
    type: "integer"
    in: "query"
    description: |
      Specify the starting index for the next chunk of results to be returned by this request.
  filtersParam:
    name: filters
    in: query
    type: string
    description: |
      ~~~~
      NOTE: This parameter is specified as a string because Swagger 2.0 does
      not support passing object or array types as query string parameters.
      ~~~~
      To use, pass a URL encoded JSON array of Filter objects (as defined in
      the definitions section).
  orderByParam:
    name: "order_by"
    type: string
    in: query
    description: |
      ~~~~
      NOTE: This parameter is specified as a string because Swagger 2.0 does
      not support passing object or array types as query string parameters.
      ~~~~
      To use, pass a URL encoded JSON array of OrderBy objects (as defined in
      the definitions section).
  patchParam:
    name: "patch"
    description: "a JSON Patch object"
    in: "body"
    required: true
    schema:
      $ref: '#/definitions/JSONPatch'
#
# Definitions are auto-generated by dart.tool.export_swagger_definitions
# Do not manually edit!
#

definitions:
  Action:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/ActionData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  ActionContext:
    type: object
  ActionContextResponse:
    properties:
      results:
        $ref: '#/definitions/ActionContext'
    type: object
  ActionData:
    additionalProperties: false
    properties:
      action_type_name:
        type: string
      args:
        type: object
        x-nullable: true
      avg_runtime:
        type: string
        x-nullable: true
      completed_runs:
        default: 0
        type: integer
      datastore_id:
        type: string
        x-nullable: true
      ecs_task_arn:
        type: string
        x-nullable: true
      end_time:
        type: string
        x-nullable: true
      engine_name:
        type: string
      error_message:
        type: string
        x-nullable: true
        x-schema-form:
          type: textarea
      extra_data:
        type: object
        x-nullable: true
      first_in_workflow:
        default: false
        type: boolean
        x-nullable: true
      last_in_workflow:
        default: false
        type: boolean
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      on_failure:
        default: DEACTIVATE
        description: applies to the workflow if this is a workflow action template,
          otherwise the datastore
        enum:
        - DEACTIVATE
        - CONTINUE
        type: string
      on_failure_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      on_success_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      order_idx:
        minimum: 0.0
        type: number
        x-nullable: true
      progress:
        type: number
        x-nullable: true
      queued_time:
        type: string
        x-nullable: true
      start_time:
        type: string
        x-nullable: true
      state:
        default: HAS_NEVER_RUN
        enum:
        - HAS_NEVER_RUN
        - QUEUED
        - PENDING
        - RUNNING
        - FINISHING
        - COMPLETED
        - FAILED
        - SKIPPED
        - TEMPLATE
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
      workflow_action_id:
        type: string
        x-nullable: true
      workflow_id:
        type: string
        x-nullable: true
      workflow_instance_id:
        type: string
        x-nullable: true
    required:
    - action_type_name
    - engine_name
    - name
    - args
    - user_id
    type: object
  ActionResponse:
    properties:
      results:
        $ref: '#/definitions/Action'
    type: object
  ActionResult:
    type: object
  ActionType:
    properties:
      description:
        type: string
      name:
        type: string
      params_json_schema:
        type: object
        x-nullable: true
    type: object
  ActionsResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/Action'
        type: array
    type: object
  Column:
    additionalProperties: false
    properties:
      data_type:
        enum:
        - STRING
        - VARCHAR
        - BIGINT
        - INT
        - SMALLINT
        - DOUBLE
        - FLOAT
        - NUMERIC
        - BOOLEAN
        - DATE
        - DATETIME
        - TIMESTAMP
        type: string
      date_pattern:
        type: string
        x-nullable: true
      description:
        type: string
        x-nullable: true
      is_nullable:
        default: true
        type: boolean
        x-nullable: true
      length:
        minimum: 1
        type: integer
        x-nullable: true
      name:
        maxLength: 255
        pattern: ^[a-zA-Z0-9_]+$
        type: string
      path:
        type: string
        x-nullable: true
      precision:
        type: integer
        x-nullable: true
      scale:
        type: integer
        x-nullable: true
    required:
    - name
    - data_type
    type: object
  DataFormat:
    additionalProperties: false
    properties:
      delimited_by:
        type: string
        x-nullable: true
      escaped_by:
        type: string
        x-nullable: true
      file_format:
        enum:
        - TEXTFILE
        - PARQUET
        - RCFILE
        type: string
      null_string:
        type: string
        x-nullable: true
      num_header_rows:
        default: 0
        minimum: 0
        type: integer
      quoted_by:
        type: string
        x-nullable: true
      regex_input:
        type: string
        x-nullable: true
      regex_output:
        type: string
        x-nullable: true
      row_format:
        enum:
        - DELIMITED
        - JSON
        - REGEX
        - NONE
        type: string
    required:
    - file_format
    - row_format
    type: object
  Dataset:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/DatasetData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  DatasetData:
    additionalProperties: false
    properties:
      batch_merge_sort_keys:
        default: []
        items:
          maxLength: 127
          pattern: ^[a-zA-Z0-9_]+ (ASC|DESC)$
          type: string
        type: array
        x-schema-form:
          title: '{{ value || ''upsert_sort_key '' + $index }}'
          type: tabarray
      columns:
        items:
          $ref: '#/definitions/Column'
        minItems: 1
        type: array
        x-schema-form:
          title: '{{ value.name || ''column '' + $index }}'
          type: tabarray
      compression:
        enum:
        - NONE
        - BZ2
        - GZIP
        - SNAPPY
        type: string
      data_format:
        $ref: '#/definitions/DataFormat'
      description:
        type: string
        x-nullable: true
      distribution_keys:
        default: []
        items:
          maxLength: 127
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        type: array
        x-schema-form:
          title: '{{ value || ''distribution_key '' + $index }}'
          type: tabarray
      hive_compatible_partition_folders:
        default: false
        type: boolean
        x-nullable: true
      load_type:
        enum:
        - INSERT
        - MERGE
        - RELOAD_ALL
        - RELOAD_LAST
        type: string
      location:
        pattern: ^s3://.+$
        type: string
      merge_keys:
        default: []
        items:
          maxLength: 127
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        type: array
        x-schema-form:
          title: '{{ value || ''merge_key '' + $index }}'
          type: tabarray
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      partitions:
        items:
          $ref: '#/definitions/Column'
        minItems: 0
        type: array
        x-nullable: true
        x-schema-form:
          title: '{{ value.name || ''column '' + $index }}'
          type: tabarray
      primary_keys:
        default: []
        items:
          maxLength: 127
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        type: array
        x-schema-form:
          title: '{{ value || ''primary_key '' + $index }}'
          type: tabarray
      sort_keys:
        default: []
        items:
          maxLength: 127
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        type: array
        x-schema-form:
          title: '{{ value || ''sort_key '' + $index }}'
          type: tabarray
      table_name:
        minLength: 1
        pattern: ^[a-zA-Z0-9_]+$
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
    required:
    - name
    - table_name
    - location
    - load_type
    - data_format
    - columns
    - compression
    - user_id
    type: object
  DatasetResponse:
    properties:
      results:
        $ref: '#/definitions/Dataset'
    type: object
  Datastore:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/DatastoreData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  DatastoreData:
    additionalProperties: false
    properties:
      args:
        type: object
        x-nullable: true
      concurrency:
        default: 1
        maximum: 10
        minimum: 1
        type: integer
      connection_url:
        type: string
        x-nullable: true
      engine_name:
        pattern: ^[a-zA-Z0-9_]+$
        type: string
      extra_data:
        type: object
        x-nullable: true
      host:
        type: string
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      port:
        type: integer
        x-nullable: true
      s3_artifacts_path:
        type: string
        x-nullable: true
      s3_logs_path:
        type: string
        x-nullable: true
      state:
        default: INACTIVE
        enum:
        - INACTIVE
        - ACTIVE
        - DONE
        - TEMPLATE
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
      workflow_datastore_id:
        type: string
        x-nullable: true
    required:
    - name
    - engine_name
    - args
    - user_id
    type: object
  DatastoreResponse:
    properties:
      results:
        $ref: '#/definitions/Datastore'
    type: object
  Engine:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/EngineData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  EngineData:
    additionalProperties: false
    properties:
      description:
        type: string
        x-nullable: true
      ecs_task_definition:
        type: object
        x-nullable: true
      ecs_task_definition_arn:
        type: string
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      options_json_schema:
        type: object
        x-nullable: true
      supported_action_types:
        items:
          $ref: '#/definitions/ActionType'
        minItems: 1
        type: array
        x-schema-form:
          title: '{{ value.name }}'
          type: tabarray
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
    required:
    - name
    - user_id
    type: object
  EngineResponse:
    properties:
      results:
        $ref: '#/definitions/Engine'
    type: object
  ErrorResponse:
    properties:
      error_message:
        type: string
      results:
        enum:
        - ERROR
        type: string
    type: object
  Event:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/EventData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  EventData:
    additionalProperties: false
    properties:
      description:
        type: string
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      state:
        default: INACTIVE
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
    required:
    - name
    - user_id
    type: object
  EventResponse:
    properties:
      results:
        $ref: '#/definitions/Event'
    type: object
  Filter:
    properties:
      key:
        type: string
      operator:
        enum:
        - '='
        - '>='
        - '>'
        - IN
        - <=
        - LIKE
        - <
        - '!='
        - NOT_LIKE
        - '~'
        type: string
      value:
        type: string
    type: object
  GraphEntity:
    properties:
      entity_id:
        type: string
      entity_type:
        type: string
      name:
        type: string
      related_id:
        type: string
      related_is_a:
        type: string
      related_type:
        type: string
      state:
        type: string
      sub_type:
        type: string
    type: object
  GraphEntityIdentifier:
    properties:
      entity_id:
        type: string
      entity_type:
        type: string
      name:
        type: string
    type: object
  GraphEntityIdentifierResponse:
    properties:
      results:
        $ref: '#/definitions/GraphEntityIdentifier'
    type: object
  GraphEntityIdentifiersResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/GraphEntityIdentifier'
        type: array
    type: object
  GraphEntityResponse:
    properties:
      results:
        $ref: '#/definitions/GraphEntity'
    type: object
  JSONPatch:
    description: JSON Patch object as defined by http://json.schemastore.org/json-patch
    type: object
  JSONSchema:
    description: JSON Schema object as defined by http://json-schema.org/schema
    type: object
  JSONSchemaResponse:
    properties:
      results:
        $ref: '#/definitions/JSONSchema'
    type: object
  OKResponse:
    properties:
      results:
        enum:
        - OK
        type: string
    type: object
  ObjectResponse:
    properties:
      results:
        type: object
    type: object
  ObjectsResponse:
    properties:
      results:
        items:
          type: object
        type: array
    type: object
  OrderBy:
    properties:
      direction:
        enum:
        - ASC
        - DESC
        type: string
      key:
        type: string
    type: object
  PagedActionsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Action'
        type: array
      total:
        type: integer
    type: object
  PagedDatasetsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Dataset'
        type: array
      total:
        type: integer
    type: object
  PagedDatastoresResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Datastore'
        type: array
      total:
        type: integer
    type: object
  PagedEnginesResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Engine'
        type: array
      total:
        type: integer
    type: object
  PagedEventsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Event'
        type: array
      total:
        type: integer
    type: object
  PagedObjectsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          type: object
        type: array
      total:
        type: integer
    type: object
  PagedSubscriptionElementsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/SubscriptionElement'
        type: array
      total:
        type: integer
    type: object
  PagedSubscriptionsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Subscription'
        type: array
      total:
        type: integer
    type: object
  PagedTriggerTypesResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/TriggerType'
        type: array
      total:
        type: integer
    type: object
  PagedTriggersResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Trigger'
        type: array
      total:
        type: integer
    type: object
  PagedWorkflowInstancesResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/WorkflowInstance'
        type: array
      total:
        type: integer
    type: object
  PagedWorkflowsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      results:
        items:
          $ref: '#/definitions/Workflow'
        type: array
      total:
        type: integer
    type: object
  Subgraph:
    type: object
  SubgraphDefinition:
    type: object
  SubgraphDefinitionResponse:
    properties:
      results:
        $ref: '#/definitions/SubgraphDefinition'
    type: object
  SubgraphResponse:
    properties:
      results:
        $ref: '#/definitions/Subgraph'
    type: object
  Subscription:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/SubscriptionData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  SubscriptionData:
    additionalProperties: false
    properties:
      dataset_id:
        type: string
      failed_time:
        type: string
        x-nullable: true
      generating_time:
        type: string
        x-nullable: true
      initial_active_time:
        type: string
        x-nullable: true
      message_id:
        type: string
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      on_failure_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      on_success_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      queued_time:
        type: string
        x-nullable: true
      s3_path_end_prefix_exclusive:
        description: The exclusive s3 path end prefix
        pattern: ^s3://.+$
        type: string
        x-nullable: true
      s3_path_regex_filter:
        description: A regex pattern the s3 path must match
        type: string
        x-nullable: true
      s3_path_start_prefix_inclusive:
        description: The inclusive s3 path start prefix
        pattern: ^s3://.+$
        type: string
        x-nullable: true
      state:
        default: INACTIVE
        enum:
        - INACTIVE
        - QUEUED
        - GENERATING
        - FAILED
        - ACTIVE
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
    required:
    - name
    - dataset_id
    - user_id
    type: object
  SubscriptionElement:
    type: object
  SubscriptionResponse:
    properties:
      results:
        $ref: '#/definitions/Subscription'
    type: object
  Trigger:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/TriggerData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  TriggerData:
    additionalProperties: false
    properties:
      args:
        type: object
      extra_data:
        type: object
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      state:
        default: INACTIVE
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      trigger_type_name:
        type: string
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
      workflow_ids:
        default: []
        items:
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''workflow_id '' + $index }}'
          type: tabarray
    required:
    - name
    - trigger_type_name
    - args
    - user_id
    type: object
  TriggerResponse:
    properties:
      results:
        $ref: '#/definitions/Trigger'
    type: object
  TriggerType:
    properties:
      description:
        type: string
      name:
        type: string
      params_json_schema:
        type: object
    type: object
  Workflow:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/WorkflowData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  WorkflowData:
    additionalProperties: false
    properties:
      avg_runtime:
        type: string
        x-nullable: true
      concurrency:
        default: 1
        maximum: 10
        minimum: 1
        type: integer
      datastore_id:
        type: string
      engine_name:
        type: string
        x-nullable: true
      name:
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        type: string
      on_failure:
        default: DEACTIVATE
        description: applies to the datastore
        enum:
        - DEACTIVATE
        - CONTINUE
        type: string
      on_failure_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      on_started_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      on_success_email:
        default: []
        items:
          pattern: ^\S+@\S+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''email '' + $index }}'
          type: tabarray
      state:
        default: INACTIVE
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
    required:
    - name
    - datastore_id
    - user_id
    type: object
  WorkflowInstance:
    additionalProperties: false
    properties:
      created:
        type: string
        x-nullable: true
      data:
        $ref: '#/definitions/WorkflowInstanceData'
      id:
        type: string
        x-nullable: true
      updated:
        type: string
        x-nullable: true
      version_id:
        type: integer
        x-nullable: true
    required:
    - data
    type: object
  WorkflowInstanceData:
    additionalProperties: false
    properties:
      datastore_id:
        type: string
      end_time:
        type: string
        x-nullable: true
      engine_name:
        type: string
      error_message:
        type: string
        x-nullable: true
        x-schema-form:
          type: textarea
      queued_time:
        type: string
        x-nullable: true
      start_time:
        type: string
        x-nullable: true
      state:
        default: QUEUED
        enum:
        - QUEUED
        - RUNNING
        - COMPLETED
        - FAILED
        type: string
      tags:
        default: []
        items:
          maxLength: 40
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        minItems: 0
        type: array
        x-schema-form:
          title: '{{ value || ''tag '' + $index }}'
          type: tabarray
      trigger_id:
        type: string
      trigger_type:
        type: string
      user_id:
        default: unknown
        maxLength: 64
        pattern: ^[@.a-zA-Z0-9_-]+$
        type: string
      workflow_id:
        type: string
    required:
    - user_id
    type: object
  WorkflowInstanceResponse:
    properties:
      results:
        $ref: '#/definitions/WorkflowInstance'
    type: object
  WorkflowResponse:
    properties:
      results:
        $ref: '#/definitions/Workflow'
    type: object
